#!/bin/bash

# The `pre-command` hook will run just before your build command runs

# Note that as the script is sourced not run directly, the shebang line will be ignored
# See https://buildkite.com/docs/agent/v3/hooks#creating-hook-scripts

set -e

HOOKS_ROOT=$( dirname "${BASH_SOURCE[0]}" )
PLUGIN_ROOT=$( dirname "$HOOKS_ROOT" )
PLUGIN_BIN="$PLUGIN_ROOT/bin"

export PATH="$PATH:$PLUGIN_BIN"
echo "~~~ :file_cabinet: Loaded Caching Plugin"

# Allow the environment to override project settings and disable git mirroring
if [ -n "${DISABLE_GIT_MIRRORING}" ]; then
  echo "'DISABLE_GIT_MIRRORING' environment varible is present."
  if [ "$DISABLE_GIT_MIRRORING" ]; then
    echo "Git Mirroring is disabled in this context"
    exit 0
  fi
fi

if [ -z "${GIT_REFERENCE_REPO_SOURCE}" ]; then
  echo "Missing 'GIT_REFERENCE_REPO_SOURCE' environment variable – disabling Git Mirroring"
  exit 0
fi

if [ "${GIT_REFERENCE_REPO_SOURCE}" == "s3" ]; then
  echo "Downloading Git Mirror from S3"
  download_repo_mirror_from_s3

  echo "Updating Environment Variables"
  # Overwrite the clone flags to use the newly-downloaded reference repo
  export BUILDKITE_GIT_CLONE_FLAGS="-v --reference /tmp/$BUILDKITE_PIPELINE_SLUG.git"
  exit 0
fi

if [ "${GIT_REFERENCE_REPO_SOURCE}" == "http" ]; then
  echo "Downloading Git Mirror from HTTP Server"
  download_repo_mirror_from_http

  # Overwrite the clone flags to use the newly-downloaded reference repo
  export BUILDKITE_GIT_CLONE_FLAGS="-v --reference /tmp/${BUILDKITE_PIPELINE_SLUG}.git"
  exit 0
fi

echo "Missing 'GIT_REFERENCE_REPO_SOURCE' environment variable – disabling Git Mirroring"
exit 0
