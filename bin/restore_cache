#!/bin/bash -eu

CACHE_KEY=$1

S3_BUCKET_NAME=${CACHE_BUCKET_NAME-}
if [ -z "$S3_BUCKET_NAME" ]; then
	if [ -z "$BUILDKITE_PLUGIN_BASH_CACHE_BUCKET" ]; then
		echo "⛔Unable to restore file from cache – no \$CACHE_BUCKET_NAME is set"
		exit 1
	else
		echo "Reading bucket name from 'BUILDKITE_PLUGIN_BASH_CACHE_BUCKET'"
		S3_BUCKET_NAME="$BUILDKITE_PLUGIN_BASH_CACHE_BUCKET"
	fi
fi

echo "Using $S3_BUCKET_NAME as cache bucket"

if aws s3api head-object --bucket "$S3_BUCKET_NAME" --key "$CACHE_KEY" > /dev/null 2>&1; then
	echo "Restoring cache entry $CACHE_KEY"

	echo "	Downloading"
	# If the bucket has transfer acceleration enabled, use it!
	ACCELERATION_STATUS=$(aws s3api get-bucket-accelerate-configuration --bucket "$S3_BUCKET_NAME" | jq '.Status' -r || true)

	if [ "$ACCELERATION_STATUS" = "Enabled" ]; then
		echo "Downloading with transfer acceleration"
		aws s3 cp "s3://$S3_BUCKET_NAME/$CACHE_KEY" "$CACHE_KEY" --endpoint-url https://s3-accelerate.amazonaws.com
	else
		aws s3 cp "s3://$S3_BUCKET_NAME/$CACHE_KEY" "$CACHE_KEY"
	fi

	echo "	Decompressing"
	USE_APPLE_ARCHIVE=${2-false}
	if [[ "$USE_APPLE_ARCHIVE" == '--use_apple_archive' ]]; then
		aa extract -p -i "$CACHE_KEY"
	else
		tar -xf "$CACHE_KEY"
	fi

	echo "	Cleaning Up"
	rm "$CACHE_KEY"
else
	echo "No cache entry found for '$CACHE_KEY'"
fi
