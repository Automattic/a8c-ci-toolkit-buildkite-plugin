#!/bin/bash -eu

# Start by restoring specs repo and pod cache:
# - The specs repo cache holds all of the Podspec files. This avoids having download them all from the CDN.
# - The pod cache holds the downloaded Pod source files. This avoids having to check them out again.
restore_cache "$BUILDKITE_PIPELINE_SLUG-specs-repos"
restore_cache "$BUILDKITE_PIPELINE_SLUG-global-pod-cache"

PODFILE_HASH=$(hash_file Podfile.lock)
LOCAL_CACHE_KEY="$BUILDKITE_PIPELINE_SLUG-local-pod-cache-$PODFILE_HASH"

# Restore the local `Pods` directory based on the `Podfile.lock` contents
restore_cache "$LOCAL_CACHE_KEY"

# If the `pod check` plugin is installed, use it to determine whether or not to install Pods at all
# If it's not installed (or if it fails), we'll try to install Pods.
# If that fails, it may be due to an out-of-date repo. We can use `--repo-update` to try to resolve this automatically.
if bundle exec pod plugins installed | grep -q check; then
	bundle exec pod check || bundle exec pod install || bundle exec pod install --repo-update --verbose
else
	bundle exec pod install || bundle exec pod install --repo-update --verbose
fi

# Check that `Podfile.lock` was unchanged by `pod install`. If it was, it means
# the lockfile might have been inadvertently changed.

# `shasum` is available only on macOS
if command -v shasum &> /dev/null; then
  sha_command='shasum -a 256'
else
  sha_command='sha256sum'
fi

function lockfile_error () {
  message=$(cat <<EOF
  \`Podfile.lock\` was changed by \`bundle exec pod install\`. Please run \`bundle exec pod install\` locally with a clean cache and commit the result.

  <details><summary>See diff</summary>

  \`\`\`
  $(git diff -- Podfile.lock)
  \`\`\`
  </details>
EOF
  )

  echo "$message"

  buildkite-agent annotate "$message" --style 'error' --context 'ctx-error'
}
trap lockfile_error ERR

echo "Checking that Podfile.lock was not modified by 'pod install'"
# Notice the two spaces as per shasum/sha256sum output
echo "${PODFILE_HASH}  Podfile.lock" | $sha_command --check --status

# Remove trap for the lockfile error now that we've done the check.
trap - ERR

# If this is the first time we've seen this particular hash of `Podfile.lock`, create a cache entry for future use
save_cache Pods "$LOCAL_CACHE_KEY"
