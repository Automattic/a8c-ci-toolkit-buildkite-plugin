#!/bin/bash -eu

USE_APPLE_ARCHIVE=${1-false}
CUSTOM_PACKAGE_RESOLVED_PATH=${2-}
BUILD_TYPE=${3-}

WORKSPACE_PACKAGE_RESOLVED_PATH=(*.xcworkspace/xcshareddata/swiftpm/Package.resolved)
ROOT_PACKAGE_RESOLVED_PATH=Package.resolved

# Find where Package.resolved is located
if [[ ! -z "$CUSTOM_PACKAGE_RESOLVED_PATH" ]]; then
	PACKAGE_RESOLVED_LOCATION=$CUSTOM_PACKAGE_RESOLVED_PATH
elif  [[ -f $WORKSPACE_PACKAGE_RESOLVED_PATH ]]; then
	BUILD_TYPE="XCODEBUILD"
	PACKAGE_RESOLVED_LOCATION=$WORKSPACE_PACKAGE_RESOLVED_PATH
	echo "The project is an Xcode project"
elif  [[ -f $ROOT_PACKAGE_RESOLVED_PATH ]]; then
	BUILD_TYPE="SWIFT"
	PACKAGE_RESOLVED_LOCATION=$ROOT_PACKAGE_RESOLVED_PATH
	echo "The project is a Swift project"
else
	echo "Unable to find Package.resolved"
fi

PACKAGE_RESOLVED_HASH=$(hash_file "$PACKAGE_RESOLVED_LOCATION")
CACHE_KEY="$BUILDKITE_PIPELINE_SLUG-spm-cache-$PACKAGE_RESOLVED_HASH"

# Restore SPM cache if it's available
mkdir -p ~/spm
cd ~/spm
if [[ "$USE_APPLE_ARCHIVE" == '--use_apple_archive' ]]; then
	echo "Using aa to restore cache"
	restore_cache "$CACHE_KEY" --use_apple_archive
else
	echo "Using tar to restore cache"
	restore_cache "$CACHE_KEY"
fi
cd -

sudo defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES

# Trust all GitHub.com and BitBucket.org keys â€“ this allows checking out dependencies via SSH
add_host_to_ssh_known_hosts bitbucket.org
add_host_to_ssh_known_hosts github.com

if [[ "$BUILD_TYPE" == "XCODEBUILD" ]]; then
	echo "Resolving packages with \`xcodebuild\`"
	xcodebuild \
	-resolvePackageDependencies \
	-clonedSourcePackagesDirPath ~/spm
elif [[ "$BUILD_TYPE" == "SWIFT" ]]; then
	echo "Resolving packages with \`swift\`"
	swift package resolve \
	--cache-path ~/spm \
	--verbose
else 
	echo "BUILD_TYPE is not set"
fi

# If this is the first time we've seen this particular cache key, save it for the future
if [[ "$USE_APPLE_ARCHIVE" == '--use_apple_archive' ]]; then
	echo "Using aa to save cache"
	APPLE_ARCHIVE_OPTIONS="-exclude-path checkouts -exclude-path artifacts"
	save_cache ~/spm "$CACHE_KEY" false --use_apple_archive "$APPLE_ARCHIVE_OPTIONS"
else
	echo "Using tar to save cache"
	save_cache ~/spm "$CACHE_KEY"
fi


