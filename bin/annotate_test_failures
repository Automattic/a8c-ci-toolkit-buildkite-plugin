#!/usr/bin/env ruby
#
# Usage:
#   annotate_test_failures [junit-file-path]
#
require 'rexml/document'

junit_path = ARGV.first || File.join('build', 'results', 'report.junit')
title = ENV.fetch('BUILDKITE_LABEL', 'Tests')

unless File.exist?(junit_path)
  puts "JUnit file not found: #{junit_path}."
  # Don't fail if `.junit` file not found to avoid "hiding" the failure in the build that resulted in the that file not being created
  exit 0
end

file = File.open(junit_path)
xmldoc = REXML::Document.new(file)

failures = []
REXML::XPath.each(xmldoc, '//testcase[failure]') do |testcase|
  failure = testcase.elements['failure']
  failures.append <<~ENTRY
  <details><summary><tt>#{testcase['name']}</tt> in <tt>#{testcase['classname']}</tt></summary>
  
  #{failure['message']}

  ```
  #{failure.text}
  ```
  </details>
  ENTRY
end

if failures.empty?
  puts "No test failure found. Removing any previous `#{title}` Buildkite annotation if any."
  system('buildkite-agent', 'annotation', 'remove', '--context', title)
  exit 0 # We don't want to fail if the `annotation remove` command failed because there was no previous annotation
else
  puts "Found #{failures.count} test failure(s). Reporting them as a `#{title}` Buildkite annotation."
  markdown = "\#\#\#\# #{title}: #{failures.length} failure(s)\n\n" + failures.join("\n")
  system('buildkite-agent', 'annotate', markdown, '--style', 'error', '--context', title)
  exit $?.exitstatus
end
