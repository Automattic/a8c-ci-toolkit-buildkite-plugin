#!/usr/bin/env ruby
# frozen_string_literal: true

#
# Usage:
#   annotate_test_failures [options] [junit-report-file-path]
#
require 'rexml/document'
require 'shellwords'
require 'net/http'
require 'json'
require 'optparse'
require_relative '../lib/test_failure'

###################
# Parse arguments
###################
slack_channel = nil
slack_webhook = ENV['SLACK_WEBHOOK'] # default value inferred from env var if not provided explicitly
args = OptionParser.new do |opts|
  opts.banner = <<~HELP
    Usage: annotate_test_failures [junit-report-file-path] [--slack CHANNEL] [--slack-webhook URL]

    Annotates the Buildkite build with a summary of failed and flaky tests based on a JUnit report file (defaults to using `build/results/report.junit`).
    Optionally also posts the same info to a Slack channel.
  HELP
  opts.on('--slack CHANNEL_NAME', 'The name of the Slack channel to post the failure summary to') { |v| slack_channel = "##{v.delete_prefix('#')}" }
  opts.on('--slack-webhook URL', 'The Slack Webhook URL to use if --slack is used. Defaults to the value of the `SLACK_WEBHOOK` env var') { |v| slack_webhook = v }
  opts.on_tail('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end.parse!
junit_path = args.first || File.join('build', 'results', 'report.junit')
title = ENV.fetch('BUILDKITE_LABEL', 'Tests')

unless File.exist?(junit_path)
  puts "JUnit file not found: #{junit_path}."
  # Don't fail if `.junit` file not found to avoid "hiding" the failure in the build that resulted in the that file not being created
  exit 0
end

###################
# Helper methods
###################

# Add a test_failure into a given array, or increment its count if it already exists
#
def record(test_failure, into:)
  existing = into.find { |f| f == test_failure }
  if existing.nil?
    into.append(test_failure)
  else
    existing.count += 1
  end
end

# Given a list of failures for a given step and state, update the corresponding annotation
#
def update_annotation(title, list, style, state)
  ctx_components = ['test-summary', ENV.fetch('BUILDKITE_STEP_ID', title), ENV.fetch('BUILDKITE_PARALLEL_JOB', nil), state]
  annotation_context = ctx_components.compact.join('-').downcase.gsub(/\W/, '-')
  if list.empty?
    puts "No test #{state}. Removing any previous `#{annotation_context}` Buildkite annotation if any.\n\n"
    system("buildkite-agent annotation remove --context #{annotation_context.shellescape} 2>/dev/null || true")
  else
    tests_count = list.map(&:key).uniq.count # Count the number of tests that failed, even if some tests might have multiple assertion failures
    puts "#{tests_count} test(s) #{state} (#{list.count} distinct assertion failures in total). Reporting them as a `#{annotation_context}` Buildkite #{style} annotation.\n\n"
    markdown = "\#\#\#\# #{title}: #{tests_count} tests #{state} (#{list.count} distinct assertion failure(s) in total)\n\n" + list.map(&:to_s).join("\n")
    puts markdown
    system('buildkite-agent', 'annotate', markdown, '--style', style, '--context', annotation_context)
  end
end

# Given a list of failures, parse list and send a slack notification with the test names in the payload
#
def send_slack_notification(slack_webhook, slack_channel, title, list)
  failing_tests = list.map { |item| "`#{item.name}` in `#{item.classname}`" }
  assertion_failures_count = list.count
  test_text = assertion_failures_count == 1 ? 'Test' : 'Tests'

  slack_message_payload = {
    "channel": slack_channel,
    "username": "#{ENV['BUILDKITE_PIPELINE_NAME']} Tests Failures",
    "icon_emoji": ':fire:',
    "blocks": [
      {
        "type": 'section',
        "text": {
          "type": 'mrkdwn',
          "text": ":warning: *#{assertion_failures_count} #{test_text} Failed in #{ENV['BUILDKITE_PIPELINE_NAME']} - #{title}*"
        },
        "accessory": {
          "type": 'button',
          "text": {
            "type": 'plain_text',
            "text": 'Build',
            "emoji": true
          },
          "value": 'build',
          "url": "#{ENV['BUILDKITE_BUILD_URL']}##{ENV['BUILDKITE_JOB_ID']}",
          "action_id": 'button-action'
        }
      },
      {
        "type": 'divider'
      },
      {
        "type": 'section',
        "text": {
          "type": 'mrkdwn',
          "text": "*Failing #{test_text}:*\n#{failing_tests.join("\n")}"
        }
      }
    ]
  }

  json_payload = JSON.generate(slack_message_payload)

  # Send message to Slack
  uri = URI(slack_webhook)
  response = Net::HTTP.post(uri, json_payload, 'Content-Type' => 'application/json')

  # Check response status
  if response.code == '200'
    puts '✅ Notification Sent!'
  else
    puts "❌ Failed to send notification. Response code: #{response.code}"
  end
end

###################
# Main
###################

file = File.open(junit_path)
xmldoc = REXML::Document.new(file)

failures = []
flakies = []
REXML::XPath.each(xmldoc, '//testcase[failure|error]') do |node|
  test_failure = TestFailure.new(node)

  if test_failure.ultimately_succeeds?(parent_node: node.parent)
    record(test_failure, into: flakies)
  else
    record(test_failure, into: failures)
  end
end

update_annotation(title, failures, 'error', 'have failed')
update_annotation(title, flakies, 'warning', 'were flaky')

if slack_channel.nil? || slack_webhook.nil?
  puts '⏩ No `--slack` channel name and/or `--slack-webhook` URL provided; skipping Slack notification.'
else
  send_slack_notification(slack_webhook, slack_channel, title, failures) unless failures.empty?
end
