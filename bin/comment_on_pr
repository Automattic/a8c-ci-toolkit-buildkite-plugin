#!/bin/bash -eu

# This script is used to comment on a pull request, and must be run in a buldkite PR step.
#
# Usage:
#
#    # Post a new comment to the PR
#    comment_on_pr "This is a comment" <github-token>
#
#    # Post a new comment which can be uniqly identifiered by the given comment id,
#    # or update the existing comment that's associated with the given comment id.
#    # You can choose to delete the existing comment if it exists by passing `--if-exist delete`.
#    comment_on_pr --id comment-id "This is a comment" [--if-exist update|delete] <github-token>
#
#    # Delete the comment associated with the given comment id
#    comment_on_pr --id comment-id <github-token>
#
# Please note the comment argument can be a path to a file containing the comment, or a markdown.

# Check dependencies and print their versions for diagnosis purposes
cat <<EOF
> jq --version
$(jq --version)

> curl --version
$(curl --version)

EOF

if [[ "${BUILDKITE_PULL_REQUEST:-invalid}" == "invalid" ]]; then
    echo "Error: this tool can only be called from a Buildkite PR job"
    exit 1
fi

# Default options
opt_comment_id=""
opt_if_exist="update"

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --id) opt_comment_id="$2"; shift ;;
        --if-exist) opt_if_exist="$2"; shift ;;
        --*) echo "Unknown option: $1"; exit 1 ;;
        *) break ;;
    esac
    shift
done

case "$#" in
    1)
        arg_pr_comment=""
        arg_github_token=$1
        ;;
    2)
        if [[ -f "$1" ]]; then
            arg_pr_comment=$(cat "$1")
        else
            arg_pr_comment="$1"
        fi

        arg_github_token=$2
        ;;
    *) echo "Error: invalid comment argument"; exit 1 ;;
esac

github_user=$(basename "$(dirname "${BUILDKITE_PULL_REQUEST_REPO%.git}")")
github_repo=$(basename "${BUILDKITE_PULL_REQUEST_REPO%.git}")
issues_endpoint="https://api.github.com/repos/${github_user}/${github_repo}/issues"

curl -s --fail -o /dev/null \
    -H "Authorization: token ${arg_github_token}" \
    -H "Accept: application/vnd.github+json" \
    "$issues_endpoint/${BUILDKITE_PULL_REQUEST}/comments" \
    || (echo "The GitHub token is invalid" && exit 1)

# Find the existing PR comment
if [[ -n "$opt_comment_id" ]]; then
    if ! [[ "$opt_comment_id" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "Error: comment id can only contain alphanumeric characters, dashes and underscores"
        exit 1
    fi

    # Do not change this variable value, it's used to identify the comments posted by this utility.
    comment_body_id="<!-- DO NOT REMOVE ci-toolkit-comment-identifier: $opt_comment_id -->"
    existing_comment_id="$(curl -s \
        -H "Authorization: token ${arg_github_token}" \
        -H "Accept: application/vnd.github+json" \
        "$issues_endpoint/${BUILDKITE_PULL_REQUEST}/comments" \
        | jq ".[] | select(.body | contains(\"$comment_body_id\")) | .id")"

    # When comment id is provided without a comment body, delete the existing comment.
    if [[ -z "$arg_pr_comment" ]]; then
        opt_if_exist="delete"
    fi
else
    comment_body_id=""
    existing_comment_id=""
fi

# Delete the existing comment if needed
if [[ -n "$existing_comment_id" && "$opt_if_exist" == "delete" ]]; then
    echo "Delete the existing comment containing $existing_comment_id"
    curl -s --fail-with-body -X DELETE \
        -H "Authorization: token ${arg_github_token}" \
        -H "Accept: application/vnd.github+json" \
        "$issues_endpoint/comments/$existing_comment_id"
fi

# Construct the comment JSON
comment_body=$(cat <<EOF
$comment_body_id
$arg_pr_comment
EOF
)
json_payload=$(jq --null-input --arg body "$comment_body" '{body: $body}')

if [[ -n "$existing_comment_id" && "$opt_if_exist" == "update" ]]; then
    echo "Update the existing comment: $existing_comment_id"
    curl -s --fail-with-body -X PATCH \
        -H "Authorization: token ${arg_github_token}" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.github+json" \
        -d "${json_payload}" \
        "$issues_endpoint/comments/$existing_comment_id"
elif [[ -n "$arg_pr_comment" ]]; then
    echo "Post a new comment"
    curl -s --fail-with-body -X POST \
        -H "Authorization: token ${arg_github_token}" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.github+json" \
        -d "${json_payload}" \
        "$issues_endpoint/${BUILDKITE_PULL_REQUEST}/comments"
else
    # No comment body was given in CLI, so do nothing
    echo "No comment to post"
fi
